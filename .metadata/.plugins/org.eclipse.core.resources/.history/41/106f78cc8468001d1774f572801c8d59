package utilities;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ExtentListenerReport implements ITestListener {

	ExtentSparkReporter htmlReporter; //variable
	ExtentReports reports;    //variable
	ExtentTest test;     //variable

	
	
	public void configureReport() {  //method
		
		
       String timestamp = new SimpleDateFormat("yyyy.mm.dd.hh.mm.ss").format(new Date());
       
        String reportName = "MyStoreTestReport-" + timestamp + ".html";
		htmlReporter = new ExtentSparkReporter(System.getProperty("user.dir")+"//Reports//" + reportName);    
		
		reports =new ExtentReports ();//Initialization 
		reports.attachReporter(htmlReporter); //html attached to reporter

		//add environment details

		reports.setSystemInfo("Machine", "testpc1");
		reports.setSystemInfo("OS", "Windows 10");
		reports.setSystemInfo("user name", "Parul");
		reports.setSystemInfo("browser", "chrome");

		//configuration to change look and feel

		htmlReporter.config().setDocumentTitle("Extent Listener Report");
		htmlReporter.config().setReportName("Test Report");
		htmlReporter.config().setTheme(Theme.DARK);
		

	}

	public void onStart(ITestContext Result)
	{
		configureReport();
		System.out.println("On Start method invoke....");
	}

	public void onFinish(ITestContext Result)
	{
		System.out.println("On Finished method invoke....");
		reports.flush();

	}

	public void onTestFailure(ITestResult Result)
	{
		System.out.println("Name of the method failed:"+ Result.getName());
		test=reports.createTest(Result.getName()) ;
		test.log(Status.FAIL, MarkupHelper.createLabel("Name of the failed test case is:" + Result.getName(),ExtentColor.RED));

		String screenShotPath = System.getProperty("user.dir") + "\\ScreenShots\\" + Result.getName() + ".png";
		File screenShotFile = new File(screenShotPath);

		if(screenShotFile.exists())
		{ 
			
			
			test.fail("Captured Screenshot is below:" + test.addScreenCaptureFromPath(screenShotPath));
		
		
		
		}
	}
		
	
	public void onTestSkipped(ITestResult Result)
	{
		System.out.println("Name of the method skipped:"+ Result.getName());
		test=reports.createTest(Result.getName()) ;
		test.log(Status.SKIP, MarkupHelper.createLabel("Name of the skip test case is:" + Result.getName(),ExtentColor.YELLOW));
	}	

	public void onTestStart(ITestResult Result)
	{
		System.out.println(" name of test method started :" + Result.getName());
	}



	public void onTestSuccess(ITestResult Result)
	{
		System.out.println("Name of the method Passed:"+ Result.getName());
		test=reports.createTest(Result.getName()) ;
		test.log(Status.PASS, MarkupHelper.createLabel("Name of the passed test case is:" + Result.getName(),ExtentColor.GREEN));

	}
	public void onTestFailedButwithinSuccessPercentage(ITestResult Result)
	{
	}
}