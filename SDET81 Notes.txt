https://meet.goto.com/selenium005

java
https://www.oracle.com/java/technologies/downloads/#jdk18-windows

eclipse
https://1drv.ms/w/s!ArLKiPknUpl9glPKiyoTwcdHbmY-?e=MKXJP4

SDET 79 - 81 Selenium Assignments
https://docs.google.com/spreadsheets/d/134CDp0UHIV818GifQRSBgTLgNxVvtP9wHHu0MsHTpCo/edit#gid=0


C:\Users\deepa\eclipse-workspace\




package AssignmentSDET81;
import java.util.Scanner;
public class Assignment3BinaryOctalHexadecimal {
	public static void main(String[] args) {
	int decimal;
    String binary,octal,hexadecimal;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter decimal ");	
	decimal=sc.nextInt();

	binary=Integer.toBinaryString(decimal);
	octal=Integer.toOctalString(decimal);
	hexadecimal=Integer.toHexString(decimal);
  System.out.println("Binary : "+binary+" Octal : "+octal+" Hexadecimal : "+hexadecimal);

	}
}
------------------------------------------------------------------------------
package AssignmentSDET81;
 import java.util.Scanner;
 public class Assignment3FibonacciSeries {
 public static void main(String[] args) {
	 
	 // fib series 0 1 1 2 3 5 8 13 21 ....
	 
    int n, 
	a=0,b=1,c;
	System.out.print("enter n");	
	Scanner sc=new Scanner(System.in);
    n=sc.nextInt();
	for(int i=1;i<n;i++) {	
	System.out.print(a+"  ");	
		c=a+b;
		a=b;
		b=c;
	}
	
	}	
}
-------------------------------------------------------------
package AssignmentSDET81;
import java.util.Scanner;
public class Assignment3Leapyear {

public static void main(String[] args){
	
	// in year    (y%4= 0 and y%100!=0) leap year, if not then not leap year
	// in century (y%400= and y%100=0) leap year, if not then not leap year
    
     int y;
     System.out.println("enter year");
     Scanner sc= new Scanner(System.in);
     y=sc.nextInt();
     
   if  (y%100==0 && y%400==0 || y%4==0 && y%100!=0)
     {
     System.out.println("leap year");
     }
   else
   {
	System.out.println(" not leap year");   
   }
   }
}

------------------------------------------------------------------------------
package AssignmentSDET81;
import java.util.Scanner;
public class Assignment3Swichcase4 {

public static void main(String[]args) {
	
	int number;
	System.out.println("enter number");
    Scanner sc = new Scanner(System.in);
    number= sc.nextInt();

 switch(number) {
  case 1:
     System.out.println(" sunday" );
     break;
  case 2:
	  System.out.println(" monday" );
	  break;
  case 3:
	  System.out.println("tuesday" );
	  break;
  case 4:
    System.out.println("wednesday" );
    break;
  case 5:
	  System.out.println("thrusday" );
	  break;
  case 6:
    System.out.println("friday" );
    break;
  case 7:
	  System.out.println("saturday" );
	  break;
   default: System.out.println(" invalid code");
	  
 } 
}
}	  
  



-------------------------------------------------------------

1-website for practice-
https://cosmocode.io/automation-practice/ (sample is available in drive)
https://www.techlistic.com/p/selenium-practice-form.html (except upload and download)
https://demoqa.com/automation-practice-form
https://www.tutorialspoint.com/selenium/selenium_automation_practice.htm {

2- logj4 second and third process code-	

#Declare loggers
status=error
name=PropertiesConfig
appenders=console, file
rootLogger.level=info
rootLogger.appenderRefs=ref_stdout, ref_logfile
rootLogger.appenderRef.ref_stdout.ref=STDOUT
rootLogger.appenderRef.ref_logfile.ref=LOGFILE

# Direct log messages to Console
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern =[%-5level]%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1}-%msg%n

# Direct log messages to a log file
appender.file.type = File
appender.file.name = LOGFILE
appender.file.fileName=logs/Mylog4j-log.log
appender.file.layout.type=PatternLayout
appender.file.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1}-%msg%n
	
	third process code-
	------------------
package dsutilities;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class LoggerLoad {
    private static Logger logger = LogManager.getLogger();

   	 public static void info(String message) {
		 logger.info(message); 			
		 }
	 public static void warn(String message) {
		 logger.warn(message);
		}
	 public static void error(String message) {
		 logger.error(message);
		}
	 public static void fatal(String message) {
		 logger.fatal(message);
		}
	 public static void debug(String message) {
		 logger.debug(message);
		}
}
	last code-
	-----------
package dstestcases;
import dsutilities.LoggerLoad;
import org.testng.annotations.Test;
public class TestCases1 {

		@Test	
	public void tst01_TestingLog() throws InterruptedException
	{
	
// if want to display info message
	LoggerLoad.info("<------------Testing Info--------->");
// if want to display warn message
	LoggerLoad.warn("â€¹-----------Testing warn--------->");
//if want to display error message
	LoggerLoad.error("<-------------Testing error--------->");
		
	}

}
	
	int emplevel,basic,bonas,boa;
	
	public SalaryAssignment2(int basic1, int boa1, int emplevel1) {
		emplevel = emplevel1;
		basic = basic1; 
		boa = boa1;
		
	for maven - maven.apache.org	
		
		
	}

	
	public float calculateTax(int grossSalary) {
		float tax = 0;
		//
		
		if(grossSalary<250000) tax=0;
		else if(grossSalary>=250000 && grossSalary<500000) tax=(0.05f*grossSalary);
		else if(grossSalary>=500000 && grossSalary<1000000) tax=(0.2f*grossSalary);
		else tax=(0.3f*grossSalary);
		
		return tax;
		
	}
	public float calculatePF() {
		float pf = 0;
		pf= (0.12f)*basic;
		return pf;
	}
	
	public int calculatePerformacebonus() {
		int bonus=0;
		
		switch (emplevel) {
		case 1: bonus=2000; break;
		case 2:bonus=2500; break;
		case 3:bonus=3000; break;
		case 4:bonus=3500; break;
		default:bonus=0; break;
			
		}
		
		return bonus;
	}
	
	public void printTakeHomeSalary() {
		
		int bonus = calculatePerformacebonus();
		int monthlyGrossSal = basic +boa+bonus;
		int yearlyGrossSal = monthlyGrossSal*12;
		float tax = calculateTax(yearlyGrossSal);
		
		float pf = calculatePF();
		
		float inHandSalary = monthlyGrossSal-(tax/12)-pf;
		System.out.println("Total Salary of employee per month is : "+inHandSalary);
		
	}
	

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("enter the basic salary of employee");
		int basic = sc.nextInt();
		System.out.println("enter the BOA salary of employee");
		int boa = sc.nextInt();
		System.out.println("enter the job level salary of employee");
		int level = sc.nextInt();
		
		SalaryAssignment2 emp = new SalaryAssignment2(basic, boa, level);
		emp.printTakeHomeSalary();
		
		//
		SalaryAssignment2 emp1 = new SalaryAssignment2(7000, 5000, 1);
		 emp1.basic=7000;
		 emp1.boa=5000;
		 emp1.emplevel=1;
		emp1.printTakeHomeSalary();
		
		SalaryAssignment2 emp2 = new SalaryAssignment2(10000, 7000, 2);
		emp2.printTakeHomeSalary();
		
		SalaryAssignment2 emp3 = new SalaryAssignment2(12000, 9000, 3);
		emp3.printTakeHomeSalary();
		
		SalaryAssignment2 emp4 = new SalaryAssignment2(15000, 10000, 4);
		emp4.printTakeHomeSalary();*/
}
------------------------------------------------------------------
package AssignmentSDET81;

import java.util.Scanner;
public class Student1 {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.println("marks of four student");
int s1,s2,s3,s4;
s1=sc.nextInt();
s2=sc.nextInt();
s3=sc.nextInt();
s4=sc.nextInt();
int total=s1+s2+s3+s4;
System.out.println("students total marks" + total);
double avg= total/4.0;
System.out.println("avgerage marks"+ avg);
  }
}
*************************************************************************************************************





                                                   DS_Algo_Project


************************************************************************************************************
Base Class -
***************************************************************************
package testCases;
import java.io.File;
import java.io.IOException;
import java.time.Duration;
import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.*;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import utilities.ReadConfig;


public class BaseClass {

	ReadConfig readconfig=new ReadConfig();

	public String baseUrl=readconfig.getAppliCationUrl();
	public String username=readconfig.getUsername();
	public String password=readconfig.getPassword();
	public String chromepath=readconfig.getChromePath();
	public String edgepath=readconfig.getEdgePath();
	public static Logger logger;
	public static WebDriver driver;	


	@Parameters("browser")
	@BeforeTest
	public void setup(String br)
	{

		if(br.equals("chrome"))

		{

			System.setProperty("webdriver.chrome.driver",readconfig.getChromePath());
			driver = new ChromeDriver();
		}

		else if(br.equals("edge"))
		{
			System.setProperty("webdriver.chrome.driver",readconfig.getEdgePath());
			driver = new EdgeDriver();
		}


		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));	
		driver.manage().window().maximize(); 	
		driver.get(baseUrl);

       logger = LogManager.getLogger("DS-Algo");
       logger.info("Url opend" );
       
	}
	

	@AfterTest
public void tearDown()
	{
		driver.close();
		driver.quit();
	}
	

 public void captureScreenShot(WebDriver driver, String testName) throws IOException
     {

   TakesScreenshot screenshot = ((TakesScreenshot )driver);
   File src = screenshot.getScreenshotAs(OutputType.FILE);
   File dest = new File (System.getProperty("user.dir")+ "//Screenshots//" + testName + ".png");
    FileUtils.copyFile(src, dest);
}





	******************************************************************************************************	
	
	HomePage-
	*********************************************************************************************
	package pageObjects;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class HomePage {

	WebDriver driver;
	
	public HomePage (WebDriver driver) {
	
		this.driver = driver;
		PageFactory.initElements( driver, this  );
		
	}

	 @FindBy(xpath ="//body[1]/div[1]/div[1]/div[1]/a[1]/button[1]") WebElement GetStartbtn;        
	@FindBy (xpath ="//a[normalize-space()='Data Structures']")WebElement DataStructures;
	@FindBy (xpath ="//a[@href='linked-list']")WebElement LinkedListedGetStartedBtn;
	@FindBy (xpath = "//a[normalize-space()='Sign in'] ")WebElement SignIn;
	  @FindBy (xpath ="//a[normalize-space()='Register!']" )WebElement Register;
	
	
	public void clickGetStartedPage () {
	 GetStartbtn.click();
	}
	
	public void clickdataStructure () {
	 DataStructures.click();
	}  
	
	public void clickDataGetStartedbtn () {
		LinkedListedGetStartedBtn.click();
		 
	}
	
	public void clickSignInPage () {
		SignIn.click();

	}
		public void clickRegistrationbtn() {
			Register.click();

	}

}
	
**********************************************************************************************
Home Test PageFactory
****************************************************************
package testCases;

import org.testng.annotations.Test;

import pageObjects.HomePage;

      public class HomePageTest extends BaseClass {
    	 
    	 
	@Test 
     
    public void homepage() throws InterruptedException {
    		   			   	
   HomePage hmPage= new HomePage (driver);
   
   Thread.sleep(1000);
   hmPage.clickGetStartedPage();
   logger.info("clicked on get started btn");
   
   Thread.sleep(1000);
   hmPage.clickdataStructure ();
   Thread.sleep(1000);
   hmPage.clickDataGetStartedbtn ();
   Thread.sleep(1000);
   hmPage.clickSignInPage ();
   Thread.sleep(1000);
  hmPage.clickRegistrationbtn();
  
    
	}
      
      }
	   	
**************************************************************************************
Registration Page-
************************************************************************************
package pageObjects;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class RegistrationPage {

WebDriver driver;
	
public RegistrationPage(WebDriver driver) {
	
	this.driver = driver;
	PageFactory.initElements( driver, this  );

}
    @FindBy (xpath = "//input[@id='id_username']")WebElement UserName;
  @FindBy (xpath = "//input[@id='id_password1'] ")WebElement Password;
     @FindBy (xpath = "//input[@id='id_password2'] ")WebElement ConfirmPassword;
   @FindBy (xpath ="//input[@value='Register']")WebElement ClickRegisterBtn;
	
   
   public void UserName (String userName){
    	UserName.clear();
     UserName.sendKeys(userName);
    }
     
    public void passWord (String pwd) {
    	Password.clear();
        Password.sendKeys(pwd);
       }
     
    public void confirmPassword (String cpwd) {
    ConfirmPassword.clear();
        ConfirmPassword.sendKeys(cpwd);
       }
    
    public void clickRegistrationBtn () throws InterruptedException {
      ClickRegisterBtn.click(); 

    }
}
**********************************************************************************************************
Registration Test
********************************************************************************************************
package testCases;
import java.io.IOException;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import pageObjects.RegistrationPage;
import utilities.XLUtils;

public class RegistrationTest extends BaseClass {
	
	@Test(dataProvider="RegistrationData")
	public void RegistrationDDT(String userName, String pwd, String cpwd) throws InterruptedException 
	 {
     RegistrationPage rpg= new  RegistrationPage (driver);
    
    
     rpg.UserName(userName);
	 Thread.sleep(1000);
	rpg.passWord(pwd);
	 Thread.sleep(1000);
	rpg.confirmPassword(cpwd);
	rpg.clickRegistrationBtn();
 
	 }
	 
   @DataProvider(name="RegistrationData")
	String [][] registrationdata()  throws IOException{
	
	try {
	String path=System.getProperty("user.dir")+"\\src\\test\\java\\testData\\LoginData.xlsx";
	
	int rownum=XLUtils.getRowCount(path, "Sheet1" );
	int colcount=XLUtils.getCellCount(path,"Sheet1",1);
	 String registrationdata[][]=new String[rownum][colcount];
 
      for(int i=1;i<=rownum;i++) {
   
	 for(int j=0;j<colcount;j++) {
	   
    registrationdata[i-1][j]=XLUtils.getCellData(path, "Sheet1", i,j);

	 }
 } 
 return registrationdata;
 
	}
catch (Exception e) {
	System.out.println(e.getMessage());
}
	return null;
}
}
	
***********************************************************************************************************
Configure Folder-
*******************************************

baseUrl=https://dsportalapp.herokuapp.com
username=Parul03
password=User#123
chromepath=./drivers\\chromedriver.exe
edgepath=./Drivers\\msedgedriver.exe
****************************************************************************

Read Config File
************************************************************************
package utilities;

import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;

public class ReadConfig {

Properties pro;
	//contructor
	public ReadConfig()
	{
	
		File src = new File("./Configuration/config.properties");
		
		try {
			FileInputStream  fis = new FileInputStream(src);
			pro = new Properties();
			pro.load(fis);
		}catch (Exception e) {
			System.out.println("Exception is" + e.getMessage());		
		}
	}
	
	public String getApplicationUrl()
		{
			String url = pro.getProperty("baseUrl");
			return url;
		}
		
	public String getUsername()
	     {	
	     String username=pro.getProperty("username");
	      return username;
	     }
	
	public String getPassword()
	   {
		String password=pro.getProperty("password");
	      return password;
	   }

    public String getChromePath()
	    {
	      String chromepath=pro.getProperty("chromepath");
	      return chromepath;
	    }
    
    public String getEdgePath()
       {
	  String edgepath=pro.getProperty("edgepath");
	  return edgepath;
       }

	*******************************************************************Extent
	ExtentReport
	*******************
	package utilities;


import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;


public class  ExtentListenerReport implements ITestListener{

	ExtentSparkReporter  htmlReporter;
	ExtentReports reports;
	ExtentTest test;
	
	public void configureReport()
	{
		ReadConfig readConfig = new ReadConfig();
		String timestamp = new SimpleDateFormat("yyyy.mm.dd.hh.mm.ss").format(new Date());
		String reportName = "MyStoreTestReport-" + timestamp + ".html";
		htmlReporter = new ExtentSparkReporter(System.getProperty("user.dir") + "//Reports//" + reportName);
		reports = new ExtentReports();
		reports.attachReporter(htmlReporter);
		
		//add system information/environment info to reports
		reports.setSystemInfo("Machine:", "testpc1");
		reports.setSystemInfo("OS", "windows 10");
		reports.setSystemInfo("browser:", readConfig.getChromePath());
		reports.setSystemInfo("user name:", "Parul");
		//configuration to change look and feel of report
		htmlReporter.config().setDocumentTitle("Extent Listener Report ");
		htmlReporter.config().setReportName("This is my First Report");
		htmlReporter.config().setTheme(Theme.DARK);
		
		
	}

	//OnStart method is called when any Test starts.
	public void onStart(ITestContext Result)					
	{		
		configureReport();
		System.out.println("On Start method invoked....");  		
	}	

	//onFinish method is called after all Tests are executed
	public void onFinish(ITestContext Result) 					
	{		
		System.out.println("On Finished method invoked....");  	
		reports.flush();//it is mandatory to call flush method to ensure information is written to the started reporter.

	}		



	// When Test case get failed, this method is called.		

	public void onTestFailure(ITestResult Result) 					
	{		
		System.out.println("Name of test method failed:" + Result.getName() );  		
		test = reports.createTest(Result.getName());//create entry in html report
		test.log(Status.FAIL, MarkupHelper.createLabel("Name of the failed test case is: " + Result.getName() ,ExtentColor.RED));
	
	String screenShotPath = System.getProperty("user.dir") + "\\ScreenShots\\" + Result.getName() + ".png";
	
	File screenShotFile = new File(screenShotPath);
	
	if(screenShotFile.exists())
	{
		test.fail("Captured Screenshot is below:" + test.addScreenCaptureFromPath(screenShotPath));
		
	}
	
	//	test.addScreenCaptureFromPath(null)
		
	}		

	// When Test case get Skipped, this method is called.		

	public void onTestSkipped(ITestResult Result)					
	{		
		System.out.println("Name of test method skipped:" + Result.getName() );  		

		test = reports.createTest(Result.getName());
		test.log(Status.SKIP, MarkupHelper.createLabel("Name of the skip test case is: " + Result.getName() ,ExtentColor.YELLOW));
	}			

	// When Test case get Started, this method is called.		

	public void onTestStart(ITestResult Result)					
	{		
		System.out.println("Name of test method started:" + Result.getName() );  		

	}		

	// When Test case get passed, this method is called.		

	public void onTestSuccess(ITestResult Result)					
	{		
		System.out.println("Name of test method sucessfully executed:" + Result.getName() );  		

		test = reports.createTest(Result.getName());
		test.log(Status.PASS, MarkupHelper.createLabel("Name of the passed test case is: " + Result.getName() ,ExtentColor.GREEN));
	}		


	public void onTestFailedButWithinSuccessPercentage(ITestResult Result)					
	{		

	}
}


	
}
************************************************************
TestNg
************************
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
<listeners>
<listener class-name="utilities.ExtentReport"></listener>
</listeners>
<parameter name="browser" value="chrome"/>
  <test thread-count="5" name="Test">
    <classes>
      <class name="testCases.BaseClass"/>
      <class name="testCases.RegistrationTest"/>
      <class name="testCases.HomePageTest"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->
****************************************************XLUtils*********************************************************
**********************************************************************************************************
package utilities;
import java.io.FileInputStream;

import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class XLUtils {
    
	public static FileInputStream fi;
	public static FileOutputStream fo ;
	public static XSSFWorkbook wb ;
	public static XSSFSheet ws;
	public static XSSFRow row;
	public static XSSFCell cell;
	
	
	public static int getRowCount (String path, String xlsheet) throws IOException
		{
		
           fi = new FileInputStream(path);
			 wb= new XSSFWorkbook(fi);
			ws=wb.getSheet(xlsheet); 
			 int rowcount =ws.getLastRowNum();
			 wb.close();
			 fi.close();
			 return rowcount;
	}

  public static int getCellCount(String path,String xlsheet, int rownum) throws IOException
{

	fi = new FileInputStream(path);
	 wb= new XSSFWorkbook(fi);
	ws=wb.getSheet(xlsheet); 
	row=ws.getRow(rownum);
	 int cellcount =(int)row.getLastCellNum();
	 wb.close();
	 fi.close();
	 return cellcount;
	 
	}

   public static String getCellData( String path, String xlsheet, int rownum, int colnum)  throws IOException
       {
           fi = new FileInputStream(path);
			 wb= new XSSFWorkbook(fi);
			ws=wb.getSheet(xlsheet); 
			 row=ws.getRow(rownum);
			 cell=row.getCell(colnum);
			 
			 DataFormatter formatter =new DataFormatter();
            String data;
            try {
        	   
        	   data = formatter.formatCellValue(cell);
           }
        	   
        	  catch (Exception e)
           {
        		  data="";
           }
        	   
           wb.close();
			 fi.close();
			 return data;
			 
       }

        	public static void  setCellData(String path, String xlsheet,int rownum, int colnum, String data  ) throws IOException   
        	   
        	{
        	  
        		fi = new FileInputStream(path);
        		 wb= new XSSFWorkbook(fi);
        		ws=wb.getSheet(xlsheet); 
        		row=ws.getRow(rownum);
        	   cell =row.getCell(colnum);
        	   cell.setCellValue(data);
        	   fo=new FileOutputStream(path);
        	   wb.write(fo);
               wb.close();
        	  fi.close();
        	  fo.close();
        		 
        		
     
        		
           }
           
}
 -----------------------------------------------------    
     Allure Report
-----------------------------------	 

import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import io.qameta.allure.Attachment;



public class AllureListener extends BaseClass implements ITestListener{

	
	private static String getTestMethodName(ITestResult iTestResult) {
	
	return iTestResult.getMethod().getConstructorOrMethod().getName();	

	}
	
	@Attachment(value = "Screenshot" , type = "image/png")
	public byte[] saveFailureScreenShot(WebDriver driver) {
	return ((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES);
		
	}
		
		@Attachment(value = "{0}" , type = "text/plain")
		public static String saveTextLog(String message) {
		return message;
		}
	@override	
	public void onStart (ITestContext iTestContext) {
	System.out.println("I am onStart method" + iTestContext.getName());
	iTestContext.setAttribute("WEbDriver", BaseClass.getdriver());
	}
	public void onFinish (ITestContext iTestContext) {
	System.out.println("I am onFinish method" + iTestContext.getName());
	
}
	
	public void onTestStart (ITestResult iTestResult) {
		System.out.println("I am in onTestStart method" + getTestMethodName(iTestResult)+ "start");
	
	}
	

	public void onTestSuccess (ITestResult iTestResult) {
		System.out.println("I am in onTestSuccess method" + getTestMethodName(iTestResult)+ "succeed");
	}
	
	public void onTestFailure (ITestResult iTestResult) {
		System.out.println("I am in onTestFailure method" + getTestMethodName(iTestResult)+ "failed");
	Object testClass = iTestResult.getInstance();
		WebDriver driver = BaseClass.getdriver();
		
		
		if (driver instanceof WebDriver) {
		
		System.out.println("Screenshot captured fot test case:" + getTestMethodName(iTestResult) );
		saveFailureScreenShot(driver);
		
		}
		
		saveTextLog(getTestMethodName(iTestResult)+ "failed and screenshot taken !");
		
	}
		
	public void onTestSkipped (ITestResult iTestResult) {
		System.out.println("I am in onTestSkipped method" + getTestMethodName(iTestResult)+ "skipped");	
		
	}
		
	public void onTestFailedButWithinSuccessPercentage (ITestResult iTestResult) {
	System.out.println("Test failed but it is in defined success ratio " + getTestMethodName(iTestResult)+ 	"ratio" + getTestMethodName(iTestResult));
		
	}
	
}
	
